/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author johnnyboyromero
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public MainUI() throws SQLException {
        initComponents();
        this.setTitle("Beta University Annual Fund");
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", null);
        stmt = conn.createStatement();

        pledges_Panel.setVisible(false);
        donors_Panel.setVisible(true);
        donations_Panel.setVisible(false);
        main_List.setVisible(true);
        main_Reports.setVisible(false);
        annualBatchTF.setVisible(false);
        annualBatchLabel.setVisible(false);
        annual_Panel.setVisible(true);
        monthly_Panel.setVisible(false);
        batchYearTF.setVisible(false);
        batchYearLabel.setVisible(false);
        donorLabel.setVisible(false);
        donorTF.setVisible(false);
        donorcatLabel.setVisible(false);
        donorcat_cbo.setVisible(false);
        circleLabel.setVisible(false);
        circle_cbo.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        Reports_Label = new javax.swing.JLabel();
        List_Label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Letter_Label = new javax.swing.JLabel();
        main_Layer = new javax.swing.JLayeredPane();
        main_List = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        innerList = new javax.swing.JLayeredPane();
        donations_Panel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        addDonations = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        donationsJTable = new javax.swing.JTable();
        viewDonations = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        donors_Panel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        deleteDonor = new javax.swing.JLabel();
        editDonor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        donorsJTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        donors_cbo = new javax.swing.JComboBox();
        donorSearch = new javax.swing.JButton();
        batchYearLabel = new javax.swing.JLabel();
        batchYearTF = new javax.swing.JTextField();
        donorLabel = new javax.swing.JLabel();
        donorTF = new javax.swing.JTextField();
        donorcatLabel = new javax.swing.JLabel();
        donorcat_cbo = new javax.swing.JComboBox();
        pledges_Panel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        addPledge = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        pledgeJTable = new javax.swing.JTable();
        viewPledges = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        donorsButton = new javax.swing.JLabel();
        pledgesButton = new javax.swing.JLabel();
        donations_Button = new javax.swing.JLabel();
        main_Reports = new javax.swing.JPanel();
        annualReports = new javax.swing.JLabel();
        monthlyReports = new javax.swing.JLabel();
        innnerReports = new javax.swing.JLayeredPane();
        monthly_Panel = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        monthlyYearTF = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        monthlycbo = new javax.swing.JComboBox();
        monthlySearch = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        monthlyJTable = new javax.swing.JTable();
        totalPledgesinYear = new javax.swing.JLabel();
        totalDonationsMonth = new javax.swing.JLabel();
        totalDonationsMonthLabel = new javax.swing.JLabel();
        totalPledgesInYearLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        mothlyPercentage = new javax.swing.JLabel();
        monthlyPercentageLabel = new javax.swing.JLabel();
        dForTheMonthLabel = new javax.swing.JLabel();
        pForTheMonthLabel = new javax.swing.JLabel();
        percentageForTheMonthLabel = new javax.swing.JLabel();
        pForTheMonth = new javax.swing.JLabel();
        dForTheMonth = new javax.swing.JLabel();
        percentageForTheMonth = new javax.swing.JLabel();
        annual_Panel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        annualJTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        annualDonations = new javax.swing.JLabel();
        annualPledges = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        annualPercentage = new javax.swing.JLabel();
        annualTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        annualcbo = new javax.swing.JComboBox();
        annualSearch = new javax.swing.JButton();
        annualBatchLabel = new javax.swing.JLabel();
        annualBatchTF = new javax.swing.JTextField();
        circleLabel = new javax.swing.JLabel();
        circle_cbo = new javax.swing.JComboBox();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(153, 0, 0));

        jPanel1.setBackground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );

        Reports_Label.setBackground(new java.awt.Color(153, 0, 0));
        Reports_Label.setFont(new java.awt.Font("Segoe UI Semilight", 0, 36)); // NOI18N
        Reports_Label.setForeground(new java.awt.Color(255, 255, 255));
        Reports_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Reports_Label.setText("Reports");
        Reports_Label.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Reports_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Reports_LabelMouseClicked(evt);
            }
        });

        List_Label.setBackground(new java.awt.Color(153, 0, 0));
        List_Label.setFont(new java.awt.Font("Segoe UI Semilight", 0, 36)); // NOI18N
        List_Label.setForeground(new java.awt.Color(255, 255, 255));
        List_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        List_Label.setText("List");
        List_Label.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        List_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                List_LabelMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(153, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/logo3.png"))); // NOI18N

        Letter_Label.setBackground(new java.awt.Color(153, 0, 0));
        Letter_Label.setFont(new java.awt.Font("Segoe UI Semilight", 0, 36)); // NOI18N
        Letter_Label.setForeground(new java.awt.Color(255, 255, 255));
        Letter_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Letter_Label.setText("Reply Form");
        Letter_Label.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Letter_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Letter_LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(List_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(Reports_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(Letter_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(List_Label)
                            .addComponent(Reports_Label)
                            .addComponent(Letter_Label))
                        .addGap(37, 37, 37)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        main_List.setBackground(new java.awt.Color(255, 255, 255));
        main_List.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(204, 0, 51));

        jLabel13.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Donations List");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(377, 377, 377)
                .addComponent(jLabel13)
                .addContainerGap(404, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        addDonations.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/addNew.png"))); // NOI18N
        addDonations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addDonationsMouseClicked(evt);
            }
        });

        donationsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor Name", "Amount"
            }
        ));
        jScrollPane4.setViewportView(donationsJTable);

        viewDonations.setText("View Donations");
        viewDonations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDonationsActionPerformed(evt);
            }
        });

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/edit.png"))); // NOI18N
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/delete.png"))); // NOI18N
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout donations_PanelLayout = new javax.swing.GroupLayout(donations_Panel);
        donations_Panel.setLayout(donations_PanelLayout);
        donations_PanelLayout.setHorizontalGroup(
            donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(donations_PanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(viewDonations, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(776, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, donations_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addDonations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(62, 62, 62))
            .addGroup(donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(donations_PanelLayout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );
        donations_PanelLayout.setVerticalGroup(
            donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(donations_PanelLayout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(donations_PanelLayout.createSequentialGroup()
                        .addComponent(viewDonations, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 316, Short.MAX_VALUE)
                        .addComponent(addDonations))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, donations_PanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(39, 39, 39))
            .addGroup(donations_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(donations_PanelLayout.createSequentialGroup()
                    .addGap(115, 115, 115)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(115, Short.MAX_VALUE)))
        );

        donors_Panel.setBackground(new java.awt.Color(204, 204, 204));

        jPanel5.setBackground(new java.awt.Color(204, 0, 51));

        jLabel11.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Donors List");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(jLabel11)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
        );

        deleteDonor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/delete.png"))); // NOI18N
        deleteDonor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteDonorMouseClicked(evt);
            }
        });

        editDonor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/edit.png"))); // NOI18N
        editDonor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editDonorMouseClicked(evt);
            }
        });

        donorsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Contact Number", "Batch Year"
            }
        ));
        jScrollPane1.setViewportView(donorsJTable);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/setClassRep.png"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(editDonor)
                        .addGap(18, 18, 18)
                        .addComponent(deleteDonor))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteDonor)
                    .addComponent(editDonor)
                    .addComponent(jLabel4))
                .addGap(25, 25, 25))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel5.setText("View by:");

        donors_cbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Class Representative", "Batch Year", "Individual", "All", "Category", "Matching Gifts", "Circle" }));
        donors_cbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donors_cboActionPerformed(evt);
            }
        });

        donorSearch.setText("SEARCH");
        donorSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorSearchActionPerformed(evt);
            }
        });

        batchYearLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        batchYearLabel.setText("Batch Year:");

        donorLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        donorLabel.setText("Donor Name:");

        donorcatLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        donorcatLabel.setText("Category:");

        donorcat_cbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Student", "Alumni", "Parent", "Faculty", "Others" }));
        donorcat_cbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorcat_cboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout donors_PanelLayout = new javax.swing.GroupLayout(donors_Panel);
        donors_Panel.setLayout(donors_PanelLayout);
        donors_PanelLayout.setHorizontalGroup(
            donors_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(donors_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(donors_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(batchYearLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(batchYearTF, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(donorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(donorTF, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(donorcatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(donorcat_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(donorSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        donors_PanelLayout.setVerticalGroup(
            donors_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(donors_PanelLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(donors_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(donorcat_cbo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(donors_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(donors_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(batchYearLabel)
                        .addComponent(batchYearTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(donorLabel)
                        .addComponent(donorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(donorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(donorcatLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 0, 51));

        jLabel12.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Pledges List");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(jLabel12)
                .addContainerGap(437, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        addPledge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/addNew.png"))); // NOI18N
        addPledge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPledgeMouseClicked(evt);
            }
        });

        pledgeJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor Name", "Amount", "Completed"
            }
        ));
        jScrollPane5.setViewportView(pledgeJTable);

        viewPledges.setText("View Pledges");
        viewPledges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPledgesActionPerformed(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/edit.png"))); // NOI18N
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/delete.png"))); // NOI18N
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pledges_PanelLayout = new javax.swing.GroupLayout(pledges_Panel);
        pledges_Panel.setLayout(pledges_PanelLayout);
        pledges_PanelLayout.setHorizontalGroup(
            pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pledges_PanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(viewPledges, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(785, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pledges_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addPledge)
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addGap(55, 55, 55))
            .addGroup(pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pledges_PanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pledges_PanelLayout.setVerticalGroup(
            pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pledges_PanelLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pledges_PanelLayout.createSequentialGroup()
                        .addComponent(viewPledges, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                        .addComponent(addPledge))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pledges_PanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(37, 37, 37))
            .addGroup(pledges_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pledges_PanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout innerListLayout = new javax.swing.GroupLayout(innerList);
        innerList.setLayout(innerListLayout);
        innerListLayout.setHorizontalGroup(
            innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(donors_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pledges_Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(donations_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        innerListLayout.setVerticalGroup(
            innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(donors_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pledges_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(innerListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(innerListLayout.createSequentialGroup()
                    .addComponent(donations_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 8, Short.MAX_VALUE)))
        );
        innerList.setLayer(donations_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        innerList.setLayer(donors_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        innerList.setLayer(pledges_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(innerList)
                .addGap(12, 12, 12))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(innerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        donorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/donors.png"))); // NOI18N
        donorsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                donorsButtonMouseClicked(evt);
            }
        });

        pledgesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/pledges.png"))); // NOI18N
        pledgesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pledgesButtonMouseClicked(evt);
            }
        });

        donations_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/donations.png"))); // NOI18N
        donations_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                donations_ButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout main_ListLayout = new javax.swing.GroupLayout(main_List);
        main_List.setLayout(main_ListLayout);
        main_ListLayout.setHorizontalGroup(
            main_ListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_ListLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(main_ListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(donorsButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pledgesButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(donations_Button, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        main_ListLayout.setVerticalGroup(
            main_ListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_ListLayout.createSequentialGroup()
                .addGroup(main_ListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(main_ListLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(donorsButton)
                        .addGap(41, 41, 41)
                        .addComponent(pledgesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(donations_Button))
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        main_Reports.setBackground(new java.awt.Color(255, 255, 255));

        annualReports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/yearLogo.png"))); // NOI18N
        annualReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                annualReportsMouseClicked(evt);
            }
        });

        monthlyReports.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Database/monthLogo.png"))); // NOI18N
        monthlyReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthlyReportsMouseClicked(evt);
            }
        });

        jPanel13.setBackground(new java.awt.Color(204, 0, 51));

        jLabel15.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Monthly Reports");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(342, 342, 342))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel10.setText("View Year:");

        jLabel16.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel16.setText("View Month:");

        monthlycbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthlycbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlycboActionPerformed(evt);
            }
        });

        monthlySearch.setText("Search");
        monthlySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlySearchActionPerformed(evt);
            }
        });

        monthlyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Names of Donors"
            }
        ));
        jScrollPane3.setViewportView(monthlyJTable);

        totalPledgesinYear.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        totalPledgesinYear.setText("Total Pledges Up To:");

        totalDonationsMonth.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        totalDonationsMonth.setText("Total Donations:");

        totalDonationsMonthLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalDonationsMonthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalDonationsMonthLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        totalPledgesInYearLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        totalPledgesInYearLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalPledgesInYearLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Orator Std", 0, 24)); // NOI18N
        jLabel3.setText("FIGURES:");

        mothlyPercentage.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        mothlyPercentage.setText("Percentage: ");
        mothlyPercentage.setToolTipText("Percentage of Pledges Fulfilled");

        monthlyPercentageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        monthlyPercentageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthlyPercentageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dForTheMonthLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        dForTheMonthLabel.setText("Total Donations:");

        pForTheMonthLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        pForTheMonthLabel.setText("Total Pledges:");

        percentageForTheMonthLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        percentageForTheMonthLabel.setText("Percentage:");

        pForTheMonth.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pForTheMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pForTheMonth.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dForTheMonth.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dForTheMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dForTheMonth.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        percentageForTheMonth.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        percentageForTheMonth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        percentageForTheMonth.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(343, 343, 343)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalPledgesinYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalDonationsMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(mothlyPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(dForTheMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pForTheMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(percentageForTheMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalPledgesInYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(totalDonationsMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(monthlyPercentageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(pForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(dForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(percentageForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(540, Short.MAX_VALUE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel14Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(34, 34, 34))
                        .addComponent(totalDonationsMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(totalDonationsMonthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalPledgesinYear, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(totalPledgesInYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(monthlyPercentageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(mothlyPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(dForTheMonthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(dForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pForTheMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(percentageForTheMonthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentageForTheMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout monthly_PanelLayout = new javax.swing.GroupLayout(monthly_Panel);
        monthly_Panel.setLayout(monthly_PanelLayout);
        monthly_PanelLayout.setHorizontalGroup(
            monthly_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(monthly_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(monthly_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(monthly_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthlyYearTF, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(monthlycbo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(monthlySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 82, Short.MAX_VALUE))
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        monthly_PanelLayout.setVerticalGroup(
            monthly_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(monthly_PanelLayout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(monthly_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(monthlyYearTF)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(monthlycbo)
                    .addComponent(monthlySearch, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(204, 0, 51));

        jLabel14.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Annual Reports");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
        );

        jLabel6.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel6.setText("View Year:");

        annualJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Names"
            }
        ));
        jScrollPane2.setViewportView(annualJTable);

        jLabel8.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel8.setText("Total Pledges:");

        jLabel9.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel9.setText("Total Donations:");

        annualDonations.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        annualDonations.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        annualDonations.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        annualPledges.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        annualPledges.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        annualPledges.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Orator Std", 0, 24)); // NOI18N
        jLabel2.setText("FIGURES:");

        jLabel17.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel17.setText("Percentage:");

        annualPercentage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        annualPercentage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        annualPercentage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(343, 343, 343)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(0, 22, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(annualDonations, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annualPledges, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(annualPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))))
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(532, Short.MAX_VALUE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annualDonations, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annualPledges, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annualPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel12Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        jLabel7.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        jLabel7.setText("View Category:");

        annualcbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Students", "Batch", "Alumni", "Parents", "Faculty", "All", "Circle", "All Circles", "Others" }));
        annualcbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annualcboActionPerformed(evt);
            }
        });

        annualSearch.setText("Search");
        annualSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annualSearchActionPerformed(evt);
            }
        });

        annualBatchLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        annualBatchLabel.setText("Batch:");

        circleLabel.setFont(new java.awt.Font("Segoe UI Semilight", 0, 14)); // NOI18N
        circleLabel.setText("Circle:");

        circle_cbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "President", "Platinum", "Gold", "Silver", "Bronze", "Copper", "Emerald", "Fluorite", "Amethyst", "Peridot" }));
        circle_cbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circle_cboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout annual_PanelLayout = new javax.swing.GroupLayout(annual_Panel);
        annual_Panel.setLayout(annual_PanelLayout);
        annual_PanelLayout.setHorizontalGroup(
            annual_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(annual_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(annual_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(annual_PanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(annualTF, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(annualcbo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(annualBatchLabel)
                        .addGap(18, 18, 18)
                        .addComponent(annualBatchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(circleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(circle_cbo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(annualSearch)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        annual_PanelLayout.setVerticalGroup(
            annual_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(annual_PanelLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(annual_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(annual_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(annualTF)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(annualBatchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(annualSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(annualcbo)
                        .addComponent(annualBatchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(circleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circle_cbo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout innnerReportsLayout = new javax.swing.GroupLayout(innnerReports);
        innnerReports.setLayout(innnerReportsLayout);
        innnerReportsLayout.setHorizontalGroup(
            innnerReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innnerReportsLayout.createSequentialGroup()
                .addComponent(annual_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(innnerReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(innnerReportsLayout.createSequentialGroup()
                    .addComponent(monthly_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        innnerReportsLayout.setVerticalGroup(
            innnerReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innnerReportsLayout.createSequentialGroup()
                .addComponent(annual_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(innnerReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(innnerReportsLayout.createSequentialGroup()
                    .addComponent(monthly_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        innnerReports.setLayer(monthly_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        innnerReports.setLayer(annual_Panel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout main_ReportsLayout = new javax.swing.GroupLayout(main_Reports);
        main_Reports.setLayout(main_ReportsLayout);
        main_ReportsLayout.setHorizontalGroup(
            main_ReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_ReportsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(main_ReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(monthlyReports)
                    .addComponent(annualReports, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(innnerReports)
                .addContainerGap())
        );
        main_ReportsLayout.setVerticalGroup(
            main_ReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_ReportsLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(main_ReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(innnerReports)
                    .addGroup(main_ReportsLayout.createSequentialGroup()
                        .addComponent(annualReports)
                        .addGap(42, 42, 42)
                        .addComponent(monthlyReports)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout main_LayerLayout = new javax.swing.GroupLayout(main_Layer);
        main_Layer.setLayout(main_LayerLayout);
        main_LayerLayout.setHorizontalGroup(
            main_LayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_List, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(main_LayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(main_Reports, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        main_LayerLayout.setVerticalGroup(
            main_LayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_List, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(main_LayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(main_Reports, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        main_Layer.setLayer(main_List, javax.swing.JLayeredPane.DEFAULT_LAYER);
        main_Layer.setLayer(main_Reports, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_Layer)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(main_Layer))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pledgesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pledgesButtonMouseClicked
        donors_Panel.setVisible(false);
        pledges_Panel.setVisible(true);
        donations_Panel.setVisible(false);
    }//GEN-LAST:event_pledgesButtonMouseClicked

    private void donorsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donorsButtonMouseClicked
        donors_Panel.setVisible(true);
        pledges_Panel.setVisible(false);
        donations_Panel.setVisible(false);
    }//GEN-LAST:event_donorsButtonMouseClicked

    private void addPledgeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPledgeMouseClicked
        addPledge a = new addPledge();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_addPledgeMouseClicked

    private void addDonationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDonationsMouseClicked
        addDonation a = new addDonation();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_addDonationsMouseClicked

    private void donations_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donations_ButtonMouseClicked
        donors_Panel.setVisible(false);
        pledges_Panel.setVisible(false);
        donations_Panel.setVisible(true);
    }//GEN-LAST:event_donations_ButtonMouseClicked

    private void List_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_List_LabelMouseClicked
        main_List.setVisible(true);
        main_Reports.setVisible(false);
    }//GEN-LAST:event_List_LabelMouseClicked

    private void Reports_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Reports_LabelMouseClicked
        main_List.setVisible(false);
        main_Reports.setVisible(true);
    }//GEN-LAST:event_Reports_LabelMouseClicked

    private void Letter_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Letter_LabelMouseClicked
        // TODO add your handling code here:
        addDonor a = new addDonor();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_Letter_LabelMouseClicked

    private void donorSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorSearchActionPerformed
        model = new DefaultTableModel();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        model.setColumnCount(4);
        if (donors_cbo.getSelectedIndex() == 0) {
            try {
                viewClassRep();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 1) {
            batchYear = Integer.valueOf(batchYearTF.getText());
            // searchResults.setText("Search Results for Batch: " + batchYear);

            try {
                viewBatch();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 2) {
            dName = donorTF.getText();
            try {
                viewIndividual();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 3) {
            try {
                viewAll();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 4) {
            cat = (String) donorcat_cbo.getSelectedItem();
            try {
                viewCat();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 5) {
            try {
                viewCorp();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (donors_cbo.getSelectedIndex() == 6) {
            try {
                viewDonorCircles();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_donorSearchActionPerformed

    public void viewDonorCircles() throws SQLException {
        stmt.executeQuery("select name, circle\n"
                + "from annualfund.person join annualfund.donation using(donor_id) join annualfund.donor using(donor_id)\n"
                + "where circle is not null and \n"
                + "is_active=1"
                + " group by (donor_id) "
                + "order by sum(amount) desc");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;
        model.setColumnCount(2);
        donorsJTable.getColumnModel().getColumn(0).setHeaderValue("Donor Name");
        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Circle");

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpCircle = rs.getString("circle");
            model.setRowCount(size);
            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpCircle, size - 1, 1);
        }
    }

    public void viewCorp() throws SQLException {
        stmt.executeQuery("select a.name as corporation, b.name as donor\n"
                + "from annualfund.matches join annualfund.donor a on (id1=a.donor_id) join annualfund.donor b on (id2=b.donor_id)\n"
                + " ");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;
        model.setColumnCount(2);
        donorsJTable.getColumnModel().getColumn(0).setHeaderValue("Matching Gifts");
        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Donor");

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("corporation");
            String tmpAddress = rs.getString("donor");

            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpAddress, size - 1, 1);
        }
    }

    public void viewCat() throws SQLException {
        stmt.executeQuery("select name,contact, address\n"
                + "from annualfund.donor join annualfund.person using(donor_id)\n"
                + "where is_active=1 and category = '" + cat + "'");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;
        model.setColumnCount(3);
        donorsJTable.getColumnModel().getColumn(0).setHeaderValue("Name");
        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Contact Number");
        donorsJTable.getColumnModel().getColumn(2).setHeaderValue("Address");

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpContact = rs.getString("contact");
            String tmpAddress = rs.getString("address");

            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpContact, size - 1, 1);
            donorsJTable.setValueAt(tmpAddress, size - 1, 2);
        }

    }

    public void viewAll() throws SQLException {
        stmt.executeQuery("select name,contact, address\n"
                + "                from annualfund.person join annualfund.donor using(donor_id)\n"
                + "                where is_active=1\n"
                + "union\n"
                + "select name,contact, address\n"
                + "                from annualfund.corporation join annualfund.donor using(donor_id)\n"
                + "                where is_active=1\n"
                + "");

        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;
        model.setColumnCount(3);
        donorsJTable.getColumnModel().getColumn(0).setHeaderValue("Name");
        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Contact Number");
        donorsJTable.getColumnModel().getColumn(2).setHeaderValue("Address");

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpContact = rs.getString("contact");
            String tmpAddress = rs.getString("address");

            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpContact, size - 1, 1);
            donorsJTable.setValueAt(tmpAddress, size - 1, 2);
        }

    }

    public void viewIndividual() throws SQLException {
        stmt.executeQuery("select name,contact, address, category\n"
                + "from annualfund.donor join annualfund.person using(donor_id)\n"
                + "where name like '%" + dName + "%' and is_active = 1");

        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Contact Number");
        donorsJTable.getColumnModel().getColumn(2).setHeaderValue("Address");
        donorsJTable.getColumnModel().getColumn(3).setHeaderValue("Category");

        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpContact = rs.getString("contact");
            String tmpAddress = rs.getString("address");
            String tmpCategory = rs.getString("category");

            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpContact, size - 1, 1);
            donorsJTable.setValueAt(tmpAddress, size - 1, 2);
            donorsJTable.setValueAt(tmpCategory, size - 1, 3);
        }

    }

    private void donors_cboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donors_cboActionPerformed
        if (donors_cbo.getSelectedIndex() == 0) {
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        } else if (donors_cbo.getSelectedIndex() == 1) {
            batchYearTF.setVisible(true);
            batchYearLabel.setVisible(true);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        } else if (donors_cbo.getSelectedIndex() == 2) {
            donorLabel.setVisible(true);
            donorTF.setVisible(true);
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        } else if (donors_cbo.getSelectedIndex() == 3) {
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        } else if (donors_cbo.getSelectedIndex() == 4) {
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(true);
            donorcat_cbo.setVisible(true);
        } else if (donors_cbo.getSelectedIndex() == 5) {
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        } else if (donors_cbo.getSelectedIndex() == 6) {
            batchYearTF.setVisible(false);
            batchYearLabel.setVisible(false);
            donorLabel.setVisible(false);
            donorTF.setVisible(false);
            donorcatLabel.setVisible(false);
            donorcat_cbo.setVisible(false);
        }
    }//GEN-LAST:event_donors_cboActionPerformed

    private void annualReportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_annualReportsMouseClicked
        annual_Panel.setVisible(true);
        monthly_Panel.setVisible(false);
    }//GEN-LAST:event_annualReportsMouseClicked

    private void annualSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annualSearchActionPerformed
        //model.fireTableDataChanged();
        if (annualcbo.getSelectedIndex() == 0) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewStudentsReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (annualcbo.getSelectedIndex() == 1) {
            annualYear = Integer.valueOf(annualTF.getText());
            annualBatch = Integer.valueOf(annualBatchTF.getText());
            try {
                viewBatchReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (annualcbo.getSelectedIndex() == 2) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewAlumniReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (annualcbo.getSelectedIndex() == 3) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewParentReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (annualcbo.getSelectedIndex() == 4) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewFacultyReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (annualcbo.getSelectedIndex() == 5) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewAllReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (annualcbo.getSelectedIndex() == 6) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewbyCircle();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (annualcbo.getSelectedIndex() == 7) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewAllCircle();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (annualcbo.getSelectedIndex() == 8) {
            annualYear = Integer.valueOf(annualTF.getText());
            try {
                viewOthersReport();
            } catch (SQLException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_annualSearchActionPerformed

    public void viewAllCircle() throws SQLException {
        stmt.executeQuery("select name \n"
                + "from annualfund.person join annualfund.donor using(donor_id) join annualfund.donation using (donor_id)\n"
                + "where circle is not null and\n"
                + "extract(year from date) = " + annualYear + " \n"
                + "group by(donor_id)\n"
                + "order by sum(amount) desc ");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select sum(amount)\n"
                + "from annualfund.person join annualfund.donor using(donor_id) join annualfund.donation using (donor_id)\n"
                + "where circle is not null and\n"
                + "extract(year from date) = " + annualYear + "");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount)\n"
                + "from annualfund.person join annualfund.donor using(donor_id) join annualfund.pledge using (donor_id)\n"
                + "where circle is not null and\n"
                + "extract(year from date) = " + annualYear + "");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }

    }

    public void viewbyCircle() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.person join annualfund.donation using(donor_id) join annualfund.donor using(donor_id)\n"
                + "where circle like '%" + circle_cbo.getSelectedItem() + "%' and \n"
                + "extract(year from date) = " + annualYear + " and is_active=1 group by(donor_id)");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        
        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and circle like '%" + circle_cbo.getSelectedItem() + "%' and  is_active=1");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and circle like '%" + circle_cbo.getSelectedItem() + "%' and  is_active=1");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        annualPercentage.setText(String.valueOf(percent * 100) + "%");

    }


    private void annualcboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annualcboActionPerformed
        if (annualcbo.getSelectedIndex() == 1) {
            annualBatchTF.setVisible(true);
            annualBatchLabel.setVisible(true);
            circleLabel.setVisible(false);
            circle_cbo.setVisible(false);
        } else if (annualcbo.getSelectedIndex() == 6) {
            circleLabel.setVisible(true);
            circle_cbo.setVisible(true);
        } else {
            annualBatchTF.setVisible(false);
            annualBatchLabel.setVisible(false);
            circleLabel.setVisible(false);
            circle_cbo.setVisible(false);
        }
    }//GEN-LAST:event_annualcboActionPerformed

    private void monthlySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlySearchActionPerformed
        monthlyYear = Integer.valueOf(monthlyYearTF.getText());
        System.out.println(month);
        month = (monthlycbo.getSelectedIndex() + 1);
        System.out.println(month);
        try {
            viewMonthlyReport();
        } catch (SQLException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_monthlySearchActionPerformed

    private void monthlyReportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthlyReportsMouseClicked
        annual_Panel.setVisible(false);
        monthly_Panel.setVisible(true);
    }//GEN-LAST:event_monthlyReportsMouseClicked

    private void monthlycboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlycboActionPerformed

    }//GEN-LAST:event_monthlycboActionPerformed

    private void viewDonationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDonationsActionPerformed
        try {
            viewDonationList();
        } catch (SQLException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewDonationsActionPerformed

    private void viewPledgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPledgesActionPerformed
        try {
            viewPledgesList();
        } catch (SQLException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewPledgesActionPerformed

    private void donorcat_cboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorcat_cboActionPerformed

    }//GEN-LAST:event_donorcat_cboActionPerformed

    private void circle_cboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circle_cboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_circle_cboActionPerformed

    private void editDonorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editDonorMouseClicked
        // TODO add your handling code here:
        editDonor a = new editDonor();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_editDonorMouseClicked

    private void deleteDonorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDonorMouseClicked
        // TODO add your handling code here:
        deleteDonor a = new deleteDonor();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_deleteDonorMouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        assignClassRep a = new assignClassRep();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        // TODO add your handling code here:
        try {
            editPledge a = new editPledge();
            a.show();
            a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
        } catch(SQLException e){
            
        }
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked
        // TODO add your handling code here:
        try {
            deletePledge a = new deletePledge();
            a.show();
            a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
        } catch(SQLException e){
            
        }
    }//GEN-LAST:event_jLabel21MouseClicked

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        editDonation a = new editDonation();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        // TODO add your handling code here:
        deleteDonation a = new deleteDonation();
        a.show();
        a.setDefaultCloseOperation(a.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jLabel19MouseClicked

    public void viewDonationList() throws SQLException {

        stmt.executeQuery("select name, sum(amount) "
                + "from annualfund.donation join annualfund.donor using(donor_id) "
                + "group by(donor_ID);"
        );
        rs = stmt.getResultSet();
        model = (DefaultTableModel) donationsJTable.getModel();
        model.setRowCount(0);
        model.setColumnCount(2);
        donationsJTable.getColumnModel().getColumn(0).setHeaderValue("Donor Name");
        donationsJTable.getColumnModel().getColumn(1).setHeaderValue("Amount");
        int size = 0;

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpAmount = rs.getString("sum(amount)");

            model.setRowCount(size);

            donationsJTable.setValueAt(tmpName, size - 1, 0);
            donationsJTable.setValueAt(tmpAmount, size - 1, 1);
        }
    }

    public void viewPledgesList() throws SQLException {

        stmt.executeQuery("select name, amount, is_complete "
                + "from annualfund.pledge join annualfund.donor using(donor_id) "
        );
        rs = stmt.getResultSet();
        model = (DefaultTableModel) pledgeJTable.getModel();
        model.setRowCount(0);
        model.setColumnCount(3);
        int size = 0;

        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpAmount = rs.getString("amount");
            int isCompleted = rs.getInt("is_complete");

            model.setRowCount(size);

            pledgeJTable.setValueAt(tmpName, size - 1, 0);
            pledgeJTable.setValueAt(tmpAmount, size - 1, 1);
            if (isCompleted == 1) {
                pledgeJTable.setValueAt("Yes", size - 1, 2);
            } else {
                pledgeJTable.setValueAt("No", size - 1, 2);
            }
        }

    }

    public void viewClassRep() throws SQLException {
//        searchResults.setText("Search Results:");
        stmt.executeQuery("select name, contact, batch_year from annualfund.donor join annualfund.batch on (class_Rep = donor_id) and is_active=1 order by batch_year");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) donorsJTable.getModel();
        model.setRowCount(0);
        int size = 0;
        model.setColumnCount(3);
        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpContact = rs.getString("contact");
            String tmpBatch = rs.getString("batch_year");

            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpContact, size - 1, 1);
            donorsJTable.setValueAt(tmpBatch, size - 1, 2);
        }
    }

    public void viewBatch() throws SQLException {

        stmt.executeQuery("select donor_id,name,address,contact "
                + "from annualFund.donor join annualFund.person using (donor_id) "
                + "where batch_year = " + batchYear + " and is_active=1");
        rs = stmt.getResultSet();
        DefaultTableModel model = (DefaultTableModel) donorsJTable.getModel();
        int size = 0;
        model.setColumnCount(5);
        donorsJTable.getColumnModel().getColumn(1).setHeaderValue("Address");
        donorsJTable.getColumnModel().getColumn(2).setHeaderValue("Contact Number");
        donorsJTable.getColumnModel().getColumn(3).setHeaderValue("This Year's Donation");
        donorsJTable.getColumnModel().getColumn(4).setHeaderValue("Last Year's Donation");

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            String tmpContact = rs.getString("contact");
            String tmpAddress = rs.getString("address");
            int donor = rs.getInt("donor_id");

            Statement stmt2 = conn.createStatement();
            stmt2.executeQuery("select sum(amount)\n"
                    + "from annualfund.donation\n"
                    + "where year(date) = year(now())\n"
                    + "and donor_id = " + donor + "\n");

            ResultSet a = stmt2.getResultSet();
            float ly = 0;
            if (a.next()) {
                ly = a.getFloat("sum(amount)");
            }
            System.out.println(ly);
            Statement stmt3 = conn.createStatement();
            stmt3.executeQuery("select sum(amount) \n"
                    + "from annualfund.donation\n"
                    + "where year(date) = (year(now()))-1\n"
                    + "and donor_id = " + donor + " ");

            ResultSet b = stmt3.getResultSet();
            float ty = 0;
            if (b.next()) {
                ty = b.getFloat("sum(amount)");
            }
            System.out.println(ty);
            model.setRowCount(size);

            donorsJTable.setValueAt(tmpName, size - 1, 0);
            donorsJTable.setValueAt(tmpAddress, size - 1, 1);
            donorsJTable.setValueAt(tmpContact, size - 1, 2);
            donorsJTable.setValueAt(ly, size - 1, 3);
            donorsJTable.setValueAt(ty, size - 1, 4);
        }
    }


    public void viewStudentsReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and category = 'Student' ;");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }

        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Student' and  is_active=1");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Student' and  is_active=1");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }
    }

    public void viewOthersReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and category = 'Others' ;");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }

        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Others'");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Others'");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }
        
    }

    public void viewBatchReport() throws SQLException {
       // model.fireTableDataChanged();
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and batch_year = " + annualBatch + ";");

        rs = stmt.getResultSet();
       
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        
        stmt.executeQuery("select sum(amount) from annualfund.person join annualfund.donation using(donor_id) \n"
                + "join annualfund.donor using(donor_id)\n"
                + "where batch_year = " + annualBatch + " and category = 'Student' and is_active = 1\n"
                + "or category='Alumni' and batch_year = " + annualBatch + "\n"
                + "and extract(year from date) = " + annualYear + " \n"
                + "and is_active = 1");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.person join annualfund.pledge using(donor_id) \n"
                + "join annualfund.donor using(donor_id)\n"
                + "where batch_year = " + annualBatch + " and category = 'Student'\n"
                + "or category='Alumni' and batch_year = " + annualBatch + "\n"
                + "and extract(year from date) = " + annualYear + " \n"
        );

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }
    }

    public void viewAlumniReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and category = 'Alumni' ;");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Alumni'");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Alumni'");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }
    }

    public void viewParentReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and category = 'Parent' ;");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Parent'");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Parent'");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }

    }

    public void viewFacultyReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")  and category = 'Faculty' ;");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select sum(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Faculty'");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + " and category = 'Faculty'");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }
    }

    public void viewAllReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + annualYear + " \n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + annualYear + "\n"
                + "    group by donor_id\n"
                + ")");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) annualJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds data to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            annualJTable.setValueAt(tmpName, size - 1, 0);
        }
        stmt.executeQuery("select SUM(amount) from annualfund.donation join annualfund.person using(donor_id) join annualfund.donor using(donor_id)\n"
                + "where extract(year from date) =  " + annualYear + "");

        ResultSet sum = stmt.getResultSet();
        while (sum.next()) {
            num = sum.getFloat(1);
            annualDonations.setText(String.valueOf(sum.getDouble(1)));
        }
        stmt.executeQuery("select SUM(amount) from annualfund.pledge join annualfund.person using(donor_id) join annualfund.donor using(donor_id)\n"
                + "where extract(year from date) =  " + annualYear + "");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            annualPledges.setText(String.valueOf(sum2.getDouble(1)));
        }
        percent = (float) num / denom;
        if (denom == 0) {
            annualPercentage.setText("---");
        } else {
            annualPercentage.setText(String.valueOf(percent * 100) + "%");
        }

    }

    public void viewMonthlyReport() throws SQLException {
        stmt.executeQuery("select name\n"
                + "from annualfund.donor join annualfund.person using (donor_id)\n"
                + "where name in (\n"
                + "    select name\n"
                + "    from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "    where extract(year from date) = " + monthlyYear + "\n"
                + "    and extract(month from date) = " + (monthlycbo.getSelectedIndex() + 1) + "\n"
                + "    group by donor_id\n"
                + "    union\n"
                + "    select name\n"
                + "    from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + monthlyYear + " \n"
                + " and extract(month from date) = " + (monthlycbo.getSelectedIndex() + 1) + "\n"
                + "    group by donor_id\n"
                + ");");
        rs = stmt.getResultSet();
        model = (DefaultTableModel) monthlyJTable.getModel();
        model.setRowCount(0);
        int size = 0;

        //adds list of donors to model
        while (rs.next()) {
            System.out.println("here");
            size += 1;
            String tmpName = rs.getString("name");
            model.setRowCount(size);
            monthlyJTable.setValueAt(tmpName, size - 1, 0);
        }

        totalPledgesinYear.setText("Total Pledges Up To " + monthlycbo.getSelectedItem() + " " + monthlyYear + ":");
        totalDonationsMonth.setText("Total Donations Up To " + monthlycbo.getSelectedItem() + " " + monthlyYear + ":");

        stmt.executeQuery("select sum(amount)"
                + "from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + monthlyYear + "\n"
                + "and extract(month from date) <= " + (monthlycbo.getSelectedIndex() + 1) + " ");

        ResultSet sum2 = stmt.getResultSet();
        while (sum2.next()) {
            denom = sum2.getFloat(1);
            totalPledgesInYearLabel.setText(String.valueOf(sum2.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount)"
                + "from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + monthlyYear + "\n"
                + "and extract(month from date) <= " + (monthlycbo.getSelectedIndex() + 1) + "");

        ResultSet sum3 = stmt.getResultSet();
        while (sum3.next()) {
            num = sum3.getFloat(1);
            totalDonationsMonthLabel.setText(String.valueOf(sum3.getDouble(1)));
        }
        System.out.println(num+" "+ denom+"\n");
        percent = (float) num / denom;
        if (denom == 0) {
            monthlyPercentageLabel.setText("---");
        } else {
            monthlyPercentageLabel.setText(String.valueOf(percent * 100) + "%");
        }

        /////FOR THE MONTH ONLY
        stmt.executeQuery("select sum(amount)"
                + "from annualfund.pledge join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + monthlyYear + "\n"
                + "and extract(month from date) = " + (monthlycbo.getSelectedIndex() + 1) + " ");

        ResultSet monthOnly = stmt.getResultSet();
        while (monthOnly.next()) {
            denom = monthOnly.getFloat(1);
            pForTheMonth.setText(String.valueOf(monthOnly.getDouble(1)));
        }
        stmt.executeQuery("select sum(amount)"
                + "from annualfund.donation join annualfund.donor using (donor_id)\n"
                + "where extract(year from date) = " + monthlyYear + "\n"
                + "and extract(month from date) = " + (monthlycbo.getSelectedIndex() + 1) + " ");

        ResultSet monthOnly2 = stmt.getResultSet();
        while (monthOnly2.next()) {
            num = monthOnly2.getFloat(1);
            dForTheMonth.setText(String.valueOf(monthOnly2.getDouble(1)));
        }

        pForTheMonthLabel.setText("Total Pledges For " + monthlycbo.getSelectedItem() + " " + monthlyYear + ":");
        dForTheMonthLabel.setText("Total Donations For " + monthlycbo.getSelectedItem() + " " + monthlyYear + ":");
        System.out.println(num+" "+ denom);
        percent = (float) num / denom;
        if (denom == 0) {
            percentageForTheMonth.setText("---");
        } else {
            percentageForTheMonth.setText(String.valueOf(percent * 100) + "%");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainUI().setVisible(true);

                } catch (SQLException ex) {
                    Logger.getLogger(MainUI.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Letter_Label;
    private javax.swing.JLabel List_Label;
    private javax.swing.JLabel Reports_Label;
    private javax.swing.JLabel addDonations;
    private javax.swing.JLabel addPledge;
    private javax.swing.JLabel annualBatchLabel;
    private javax.swing.JTextField annualBatchTF;
    private javax.swing.JLabel annualDonations;
    private javax.swing.JTable annualJTable;
    private javax.swing.JLabel annualPercentage;
    private javax.swing.JLabel annualPledges;
    private javax.swing.JLabel annualReports;
    private javax.swing.JButton annualSearch;
    private javax.swing.JTextField annualTF;
    private javax.swing.JPanel annual_Panel;
    private javax.swing.JComboBox annualcbo;
    private javax.swing.JLabel batchYearLabel;
    private javax.swing.JTextField batchYearTF;
    private javax.swing.JLabel circleLabel;
    private javax.swing.JComboBox circle_cbo;
    private javax.swing.JLabel dForTheMonth;
    private javax.swing.JLabel dForTheMonthLabel;
    private javax.swing.JLabel deleteDonor;
    private javax.swing.JTable donationsJTable;
    private javax.swing.JLabel donations_Button;
    private javax.swing.JPanel donations_Panel;
    private javax.swing.JLabel donorLabel;
    private javax.swing.JButton donorSearch;
    private javax.swing.JTextField donorTF;
    private javax.swing.JLabel donorcatLabel;
    private javax.swing.JComboBox donorcat_cbo;
    private javax.swing.JLabel donorsButton;
    private javax.swing.JTable donorsJTable;
    private javax.swing.JPanel donors_Panel;
    private javax.swing.JComboBox donors_cbo;
    private javax.swing.JLabel editDonor;
    private javax.swing.JLayeredPane innerList;
    private javax.swing.JLayeredPane innnerReports;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLayeredPane main_Layer;
    private javax.swing.JPanel main_List;
    private javax.swing.JPanel main_Reports;
    private javax.swing.JTable monthlyJTable;
    private javax.swing.JLabel monthlyPercentageLabel;
    private javax.swing.JLabel monthlyReports;
    private javax.swing.JButton monthlySearch;
    private javax.swing.JTextField monthlyYearTF;
    private javax.swing.JPanel monthly_Panel;
    private javax.swing.JComboBox monthlycbo;
    private javax.swing.JLabel mothlyPercentage;
    private javax.swing.JLabel pForTheMonth;
    private javax.swing.JLabel pForTheMonthLabel;
    private javax.swing.JLabel percentageForTheMonth;
    private javax.swing.JLabel percentageForTheMonthLabel;
    private javax.swing.JTable pledgeJTable;
    private javax.swing.JLabel pledgesButton;
    private javax.swing.JPanel pledges_Panel;
    private javax.swing.JLabel totalDonationsMonth;
    private javax.swing.JLabel totalDonationsMonthLabel;
    private javax.swing.JLabel totalPledgesInYearLabel;
    private javax.swing.JLabel totalPledgesinYear;
    private javax.swing.JButton viewDonations;
    private javax.swing.JButton viewPledges;
    // End of variables declaration//GEN-END:variables
    Statement stmt;
    Connection conn;
    DefaultTableModel model;
    int batchYear = 0;
    int annualYear = 0;
    int annualBatch = 0;
    int month = 0;
    int monthlyYear = 0;
    String dName;
    String circle;
    ResultSet rs;
    String cat;
    float percent = 0;
    float num;
    float denom;
}
